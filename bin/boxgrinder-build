#!/usr/bin/env ruby

# JBoss, Home of Professional Open Source
# Copyright 2009, Red Hat Middleware LLC, and individual contributors
# by the @authors tag. See the copyright.txt in the distribution for a
# full listing of individual contributors.
#
# This is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of
# the License, or (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this software; if not, write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA, or see the FSF site: http://www.fsf.org.

require 'rubygems'

gem 'boxgrinder-core', '>= 0.1.0'
gem 'commander', '>= 4.0.3'

require 'boxgrinder-core/helpers/log-helper'
require 'boxgrinder-build/appliance'

#$stderr.reopen($stdout)

if Process.uid != 0
  puts "This program must be executed with root privileges. Try 'sudo boxgrinder-build'"
  abort
end

require 'commander/import'

program :name, 'BoxGrinder Build'
program :version, '0.6.0'
program :description, "A tool for building VM images from simple definition files."
program :help, 'Homepage', 'http://www.jboss.org/boxgrinder/build.html'
program :help, 'Documentation', 'http://community.jboss.org/docs/DOC-14358'
program :help, 'Examples', "Run 'boxgrinder-build -h build' for more info about syntax."
default_command :build

$log_level = :info

global_option('-V', '--verbose', TrueClass, "Prints debug information while building. Default: false.") { $log_level = :debug}
global_option('-W', '--very-verbose', TrueClass, "Prints trace information while building. Default: false.") { $log_level = :trace}

module BoxGrinder
  command :build do |c|
    c.syntax      = 'build appliance_definition.appl [options]'
    c.description = 'Creates an image from selected appliance definition for selected platform.'
    c.examples    = "boxgrinder-build test.appl -p vmware\nboxgrinder-build test.appl -p ec2 -d ami\nboxgrinder-build test.appl -d sftp"

    c.option '-p STRING', '--platform STRING', String, "The type of platform. Default: none." # Valid types are: #{PlatformPluginManager.instance.plugins.keys.join(', ')}. Default: none."
    c.option '-d STRING', '--delivery STRING', String, "The delivery type for selected image. Default: none." # Valid types are: #{DeliveryPluginManager.instance.types.keys.join(', ')}. Default: none."
    c.option '-f STRING', '--force', TrueClass, "Force image creation - removes all previous builds for selected appliance. Default: false."
    c.option '-l STRING', '--plugins STRING', String, "Comma separated list of plugins. Default: default plugins will be available."

    c.action do |args, options|
      options.default :platform => :none
      options.default :delivery => :none
      options.default :force    => false

      options.name      = program(:name)
      options.version   = program(:version)

      options.platform  = options.platform.to_s.downcase.to_sym
      options.delivery  = options.delivery.to_s.downcase.to_sym

      appliance_definition_file = args.shift or raise("You need to specify appliance definition file. Run 'boxgrinder-build -h' for more info")

      raise "Appliance definition file '#{appliance_definition_file}' could not be found" unless File.exists?( appliance_definition_file )

      Appliance.new( appliance_definition_file, :options => options, :log => LogHelper.new( :threshold => $log_level ) ).create
    end
  end
end
