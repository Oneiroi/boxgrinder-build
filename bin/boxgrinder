#!/usr/bin/env ruby

# Copyright 2010 Red Hat, Inc.
#
# This is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 3 of
# the License, or (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this software; if not, write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA, or see the FSF site: http://www.fsf.org.

require 'rubygems'
require 'boxgrinder-core/helpers/log-helper'
require 'boxgrinder-build/appliance'
require 'boxgrinder-build/helpers/thor-helper'

#$stderr.reopen($stdout)

if Process.uid != 0
  puts "This program must be executed with root privileges. Try 'sudo boxgrinder-build'"
  abort
end

module BoxGrinder
  class App < ThorHelper
    desc "build [appliance definition file] [options]", "Create an image from selected appliance definition for selected platform and deliver it using selected method."
    method_option :platform, :type => :string, :default => :none, :aliases => '-p', :desc => "The name of platform you want to convert to."
    method_option :delivery, :type => :string, :default => :none, :aliases => '-d', :desc => "The delivery method for selected appliance."
    method_option :os_config, :type => :hash, :default => {}, :desc => "Operating system plugin options."
    method_option :platform_config, :type => :hash, :default => {}, :desc => "Platform plugin options."
    method_option :delivery_config, :type => :hash, :default => {}, :desc => "Delivery plugin options."
    method_option :additional_plugins, :type => :array, :default => [], :banner => 'plugin1 plugin2', :aliases => '-l', :desc => "Space separated list of additional plugins. Default: empty."
    method_option :force, :type => :boolean, :default => false, :aliases => '-f', :desc => "Force image creation - removes all previous builds for selected appliance. Default: false."
    method_option :debug, :type => :boolean, :default => false, :desc => "Prints debug information while building. Default: false."
    method_option :trace, :type => :boolean, :default => false, :desc => "Prints trace information while building. Default: false."

    def build(appliance_definition_file)
      log_level = :debug if options.debug?
      log_level = :trace if options.trace?
      
      config = Config.new(options.merge(:platform => options.platform.to_sym, :delivery => options.delivery.to_sym))
      config.merge!(:log_level => log_level) unless log_level.nil?

      log = LogHelper.new(:level => config.log_level)

      unless File.exists?(appliance_definition_file)
        log.fatal "Appliance definition file '#{appliance_definition_file}' could not be found."
        abort
      end

      begin
        Appliance.new(appliance_definition_file, config, :log => log ).create
      rescue Exception => e
        log.fatal e
      end
    end
  end
end

begin
  BoxGrinder::App.start
rescue Thor::Error => e
  puts e.message
end

